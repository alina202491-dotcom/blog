---
// src/components/MusicPlayer.astro
// 【最终方案】
// 结合了自定义按钮方案和强制定位/最小化要求。
// 通过指定一个更好的第三方 API 来解决歌曲不完整的问题。

// 你可以根据自己的喜好修改这些值
const server = "netease";       // 音乐平台: netease, tencent, kugou, xiami, baidu
const type = "playlist";        // 类型: song, playlist, album, search, artist
const id = "3778678";         // 歌单ID
---

<!-- 
  播放器容器。
  我们用一个 style 标签来强制固定它的位置和层级，确保它总在左下角最顶层。
-->
<div id="music-player-container">
    <!-- 自定义的播放/暂停按钮 -->
    <button  
        id="custom-play-pause-btn"  
        aria-label="Play or pause music"
        class="w-14 h-14 bg-gray-900/70 backdrop-blur-md rounded-full flex items-center justify-center text-white shadow-lg transition-all duration-300 hover:scale-110 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white"
    >
        <!-- 播放图标 -->
        <svg id="play-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
            <path d="M8 5v14l11-7z"></path>
        </svg>
        <!-- 暂停图标 -->
        <svg id="pause-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor" class="hidden">
            <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"></path>
        </svg>
    </button>
    
    <!-- 
      MetingJS 播放器本体。
      它本身会被下面的脚本隐藏，只在后台工作。
    -->
    <meting-js
        id="meting-player"
        server={server}
        type={type}
        id={id}
        fixed="false"
        autoplay="false"
        loop="all"
        order="random"
        preload="auto"
        list-folded="true"
        theme="#2d3748"
    >
    </meting-js>
</div>

<!-- 【重要修复】 
  1. 根据文档，我们先定义全局的 API 地址，指向一个能提供完整歌曲的服务。
-->
<script is:inline>
  var meting_api = 'https://music.ikuner.tech/api?server=:server&type=:type&id=:id';
</script>

<!-- 
  2. 然后再引入 APlayer 和 MetingJS 的库。
  MetingJS 会自动使用我们上面定义的 meting_api。
-->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css" is:inline>
<script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js" is:inline></script>
<script src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js" is:inline></script>


<style>
  /* 当按钮有 'playing' 类时，应用旋转动画 */
  #custom-play-pause-btn.playing {
    animation: spin 4s linear infinite;
  }

  /* 定义旋转动画 */
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  /* 【重要】
    使用 is:global 来确保我们的定位样式能覆盖任何主题自带的样式。
    这就是“强制显示在左下方”的实现。
  */
  :global(#music-player-container) {
    position: fixed !important;
    left: 0rem; /* 32px */
    bottom: 0rem; /* 32px */
    z-index: 2147483647 !important;
  }
</style>

<script>
    // 使用 'astro:page-load' 事件确保在客户端路由切换时也能正确执行
    document.addEventListener('astro:page-load', () => {
        const customBtn = document.getElementById('custom-play-pause-btn');
        const playIcon = document.getElementById('play-icon');
        const pauseIcon = document.getElementById('pause-icon');

        if (!customBtn || !playIcon || !pauseIcon) {
            console.error('Custom player button elements not found.');
            return;
        }

        // MetingJS 初始化需要一些时间，我们轮询检查 aplayer 实例是否准备好
        const interval = setInterval(() => {
            // MetingJS 会在 window 对象上附加 aplayer 实例
            const ap = (window as any).ap;  
            if (ap) {
                clearInterval(interval); // 找到实例，停止轮询

                // 隐藏 MetingJS 默认的播放器 UI，实现“最小化”
                const metingContainer = document.querySelector('.aplayer');
                if (metingContainer) {
                    (metingContainer as HTMLElement).style.display = 'none';
                }

                const updateUI = () => {
                    if (ap.audio.paused) {
                        customBtn.classList.remove('playing');
                        playIcon.classList.remove('hidden');
                        pauseIcon.classList.add('hidden');
                    } else {
                        customBtn.classList.add('playing');
                        playIcon.classList.add('hidden');
                        pauseIcon.classList.remove('hidden');
                    }
                };

                // 初始化 UI
                updateUI();

                // 监听播放和暂停事件来同步我们的自定义按钮
                ap.on('play', updateUI);
                ap.on('pause', updateUI);

                // 点击我们的按钮时，调用 aplayer 的 toggle 方法
                customBtn.addEventListener('click', () => {
                    ap.toggle();
                });
            }
        }, 100); // 每 100 毫秒检查一次
    });
</script>
