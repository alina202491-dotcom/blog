---
// src/components/MusicPlayer.astro
// 【简洁封面版本】
// 只显示正方形专辑封面，隐藏胶囊背景和按钮
// 点击封面可以播放/暂停

// 你可以根据自己的喜好修改这些值
const server = "netease";      // 音乐平台: netease, tencent, kugou, xiami, baidu
const type = "playlist";       // 类型: song, playlist, album, search, artist
const id = "3778678";          // 歌单ID
---

<!-- 
  播放器容器 - 现在只显示专辑封面
-->
<div 
  id="music-player-container"
  class="w-16 h-16 rounded-lg overflow-hidden cursor-pointer shadow-lg transition-all duration-300 hover:scale-105"
>
  <!-- 专辑封面图片 -->
  <img 
    id="album-cover" 
    src="" 
    alt="专辑封面"
    class="w-full h-full object-cover"
  />
  
  <!-- 播放状态指示器（可选的小图标覆盖层） -->
  <div 
    id="play-indicator"
    class="absolute inset-0 bg-black/30 flex items-center justify-center opacity-0 transition-opacity duration-200 hover:opacity-100"
  >
    <!-- 播放图标 -->
    <svg id="play-icon-overlay" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="white">
      <path d="M8 5v14l11-7z"></path>
    </svg>
    <!-- 暂停图标 -->
    <svg id="pause-icon-overlay" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="white" class="hidden">
      <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"></path>
    </svg>
  </div>
    
  <!-- 
    MetingJS 播放器本体。
    完全隐藏，只在后台工作。
  -->
  <meting-js
    id="meting-player"
    server={server}
    type={type}
    id={id}
    fixed="false"
    autoplay="false"
    loop="all"
    order="random"
    preload="auto"
    list-folded="true"
    theme="#2d3748"
    style="display: none;"
  >
  </meting-js>
</div>

<!-- API 配置 -->
<script is:inline>
  var meting_api = 'https://music.ikuner.tech/api?server=:server&type=:type&id=:id';
</script>

<!-- 引入必要的库 -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css" is:inline>
<script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js" is:inline></script>
<script src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js" is:inline></script>

<style>
  /* 播放时的旋转动画（应用到封面） */
  #album-cover.playing {
    animation: spin 10s linear infinite;
  }

  /* 定义旋转动画 */
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  /* 【重要】固定定位在左下角 */
  :global(#music-player-container) {
    position: fixed !important;
    left: 1rem; /* 16px */
    bottom: 1rem; /* 16px */
    z-index: 2147483647 !important;
    /* 相对定位用于内部的绝对定位元素 */
    position: relative;
  }

  /* 确保 MetingJS 的播放器完全隐藏 */
  :global(.aplayer) {
    display: none !important;
  }

  /* 默认封面样式（如果没有封面图片） */
  #album-cover {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  }
</style>

<script>
  // 使用 'astro:page-load' 事件确保在客户端路由切换时也能正确执行
  document.addEventListener('astro:page-load', () => {
    const container = document.getElementById('music-player-container');
    const albumCover = document.getElementById('album-cover');
    const playIndicator = document.getElementById('play-indicator');
    const playIconOverlay = document.getElementById('play-icon-overlay');
    const pauseIconOverlay = document.getElementById('pause-icon-overlay');

    if (!container || !albumCover) {
      console.error('Music player elements not found.');
      return;
    }

    // MetingJS 初始化检查
    const interval = setInterval(() => {
      const ap = (window as any).ap;  
      if (ap) {
        clearInterval(interval);

        // 确保原始播放器完全隐藏
        const metingContainer = document.querySelector('.aplayer');
        if (metingContainer) {
          (metingContainer as HTMLElement).style.display = 'none';
        }

        // 更新播放器状态的函数
        const updatePlayerState = () => {
          // 更新播放状态
          if (ap.audio.paused) {
            albumCover.classList.remove('playing');
            playIconOverlay.classList.remove('hidden');
            pauseIconOverlay.classList.add('hidden');
          } else {
            albumCover.classList.add('playing');
            playIconOverlay.classList.add('hidden');
            pauseIconOverlay.classList.remove('hidden');
          }
          
          // 更新专辑封面
          if (ap.list && ap.list.audios[ap.list.index]) {
            const currentSong = ap.list.audios[ap.list.index];
            if (currentSong.pic) {
              albumCover.src = currentSong.pic;
              albumCover.alt = `${currentSong.name} - ${currentSong.artist}`;
            }
          }
        };

        // 初始化
        updatePlayerState();

        // 事件监听
        ap.on('play', updatePlayerState);
        ap.on('pause', updatePlayerState);
        ap.on('listswitch', updatePlayerState);

        // 点击封面播放/暂停
        container.addEventListener('click', () => {
          ap.toggle();
        });

        // 鼠标悬停效果（可选）
        container.addEventListener('mouseenter', () => {
          if (playIndicator) {
            playIndicator.style.opacity = '1';
          }
        });

        container.addEventListener('mouseleave', () => {
          if (playIndicator) {
            playIndicator.style.opacity = '0';
          }
        });
      }
    }, 100);
  });
</script>
