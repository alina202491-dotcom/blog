---
// 导入 Svg, 时间处理, 网站配置等
import Svg from "@/components/Svg/Svg.astro";
import { fmtTime } from "@/utils/index";
import SITE_CONFIG from "@/config";
const { Avatar, Author, Motto, WebSites, GoogleAds, AsideShow } = SITE_CONFIG;

// 导入文章数据获取工具
import { getCategories, getTags, getRecommendArticles, getCountInfo } from "@/utils/getPostInfo";
const categories = getCategories();
const tags = getTags();
const CountInfo = getCountInfo();
const recommendArticles = getRecommendArticles();

// 导入 Google 广告和目录组件
import GoogleAd from "@/components/GoogleAd/GoogleAd.astro";
import TableOfContents from "@/components/TableOfContents.astro";

import "./Aside.less";

// 我们仍然需要从 props 接收 headings，因为只有文章页才知道具体的标题内容
const { headings = [] } = Astro.props;
---

<aside class="vh-aside">
	<!-- 头像块 -->
	{AsideShow.WebSitesShow && (
		<section class="vh-aside-item user">
			<img class="vh-aside-avatar" src="/assets/images/lazy-loading.webp" data-vh-lz-src={Avatar} alt={Author} />
			<span class="vh-aside-auther">{Author}</span>
			<p class="vh-aside-motto">{Motto}</p>
			<section class="vh-aside-links">
				{WebSites.map(item => (
					<a class="vh-aside-links-item" href={item.link} title={item.text} target="_blank" rel="noopener nofollow">
						<Svg src={item.icon} />
					</a>
				))}
			</section>
			<section class="vh-aside-info">
				<div class="art-item count"><span>{CountInfo.ArticleCount}</span><p>文章数</p></div>
				<div class="cat-item count"><span>{CountInfo.CategoryCount}</span><p>分类数</p></div>
				<div class="tag-item count"><span>{CountInfo.TagCount}</span><p>标签数</p></div>
			</section>
			<canvas class="vh-aside-canvas" width="888" height="1888" />
		</section>
	)}

	<!-- 公告块 -->
	{SITE_CONFIG.Tips && (
		<section class="vh-aside-item tips">
			<span>
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
					<path stroke="none" d="M0 0h24v24H0z" fill="none" />
					<path d="M3 9.662c2 2.338 2 4.338 0 6.338c3 .5 4.5 1 5 4c2 -3 6 -4 9 0c0 -3 1 -4 4 -4.004q -3 -2.995 0 -5.996c-3 0 -5 -2 -5 -5c-2 4 -5 3 -7.5 -1c-.5 3 -2.5 5 -5.5 5.662" />
				</svg>
				公告
			</span>
			<div class="tips-content">
				<Fragment set:html={SITE_CONFIG.Tips} />
			</div>
		</section>
	)}

	<!-- 分类块 -->
	{AsideShow.CategoriesShow && (
		<section class="vh-aside-item cat">
			<h3>分类</h3>
			<div class="vh-aside-cat">
				{categories
					.sort((a: any, b: any) => b.count - a.count)
					.map(i => (
						<a href={`/categories/${i.title}`}>
							<span>{i.title}</span>
							<i>{i.count}</i>
						</a>
					))}
			</div>
		</section>
	)}

	<!-- 标签块 -->
	{AsideShow.TagsShow && (
		<section class="vh-aside-item tags">
			<h3>热门标签</h3>
			<div class="vh-aside-tags">
				{tags.map(i => (
					<a href={`/tag/${i[0]}`}>
						<span>{i[0]}</span>
						<em>{i[1]}</em>
					</a>
				))}
			</div>
		</section>
	)}

	<section class="sticky-aside">
		<!-- 最新文章块 -->
		{recommendArticles.length && AsideShow.recommendArticleShow && (
			<section class="vh-aside-item articles">
				<h3>推荐文章</h3>
				<div class="vh-aside-articles">
					{recommendArticles.map((i, idx) => (
						<a href={`/article/${i.id}`}>
							<span>
								{idx < 3 ? <i>{idx + 1}</i> : <em>{idx + 1}.</em>}
								<cite class="vh-ellipsis">{i.title}</cite>
							</span>
							<time>{fmtTime(i.date, "YYYY-MM-DD A")}</time>
						</a>
					))}
				</div>
			</section>
		)}

        {/* 目录模块：仅当 headings 数组不为空时才渲染 */}
        {headings.length > 0 && (
            <section class="vh-aside-item toc-wrapper" id="toc-aside-wrapper">
                <TableOfContents headings={headings} />
            </section>
        )}

		<!-- 谷歌广告块 -->
		{GoogleAds.ad_Client && GoogleAds.asideAD_Slot && (
			<section class="vh-aside-item ad">
				<h3>广而告之</h3>
				<GoogleAd className="vh-aside-ad" slotID={GoogleAds.asideAD_Slot} />
			</section>
		)}
	</section>
</aside>

<!-- ======================================================= -->
<!-- == 关键修复：添加客户端脚本来控制目录的显示/隐藏 == -->
<!-- ======================================================= -->
<script>
	function updateTocVisibility() {
		// 尝试获取目录的包装器元素
		const tocWrapper = document.getElementById('toc-aside-wrapper');
		
		// 如果在当前页面上找不到这个元素，就直接退出
		if (!tocWrapper) {
			return;
		}

		// 在客户端检查当前的 URL
		const isArticlePage = window.location.pathname.startsWith('/article/');

		// 根据是否为文章页，来设置包装器的显示或隐藏
		if (isArticlePage) {
			tocWrapper.style.display = 'block'; // 或者 'flex', 'grid' 等，取决于你的布局
		} else {
			tocWrapper.style.display = 'none';
		}
	}

	// 在页面首次加载时运行一次
	updateTocVisibility();

	// 在每次客户端导航（页面切换）后，都再次运行
	document.addEventListener('astro:page-load', updateTocVisibility);
</script>
