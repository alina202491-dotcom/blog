---
// src/components/TocManager.astro
// 这个组件是“目录”功能的大脑，它只包含客户端脚本，
// 负责在每次页面切换后，动态地生成和管理目录。
---
<script>
    // 函数：添加滚动监听，实现当前章节高亮
    function addScrollListener() {
        const tocLinks = document.querySelectorAll('#toc-placeholder .toc-list a');
        if (tocLinks.length === 0) return;

        let currentActiveId = null;
        const observer = new IntersectionObserver(entries => {
            let topmostEntry = null;
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    if (!topmostEntry || entry.boundingClientRect.top < topmostEntry.boundingClientRect.top) {
                        topmostEntry = entry;
                    }
                }
            });

            if (topmostEntry) {
                const id = topmostEntry.target.getAttribute('id');
                if (id !== currentActiveId) {
                    const oldActiveLink = document.querySelector(`#toc-placeholder .toc-list a.active`);
                    if (oldActiveLink) {
                        oldActiveLink.classList.remove('active');
                    }
                    
                    const newActiveLink = document.querySelector(`#toc-placeholder .toc-list a[href="#${id}"]`);
                    if (newActiveLink) {
                        newActiveLink.classList.add('active');
                        currentActiveId = id;
                    }
                }
            }
        }, { 
            rootMargin: '-20% 0px -75% 0px', 
            threshold: 0 
        });

        document.querySelectorAll('.main-inner-content h1[id], .main-inner-content h2[id], .main-inner-content h3[id], .main-inner-content h4[id], .main-inner-content h5[id]').forEach(heading => {
            observer.observe(heading);
        });
    }

    // 函数：根据扫描到的标题，构建目录的 HTML
    function buildTocHtml(headings) {
        const listItems = headings.map(heading => `
            <li class="toc-item depth-${heading.depth}">
                <a href="#${heading.slug}">
                    <span class="toc-text">${heading.text}</span>
                </a>
            </li>
        `).join('');

        // 关键修改：更新标题文本以匹配新设计
        return `
            <div class="toc-wrapper">
                <h3 class="toc-title">ON THIS PAGE</h3>
                <ul class="toc-list">${listItems}</ul>
            </div>
        `;
    }

    // 主函数：管理目录的显示与隐藏
    function manageToc() {
        const placeholder = document.getElementById('toc-placeholder');
        if (!placeholder) return;

        const isArticlePage = window.location.pathname.startsWith('/article/');
        if (!isArticlePage) {
            placeholder.innerHTML = '';
            placeholder.style.display = 'none';
            return;
        }

        const headingElements = document.querySelectorAll('.main-inner-content h1[id], .main-inner-content h2[id], .main-inner-content h3[id], .main-inner-content h4[id], .main-inner-content h5[id]');
        
        if (headingElements.length === 0) {
            placeholder.innerHTML = '';
            placeholder.style.display = 'none';
            return;
        }

        const headings = Array.from(headingElements).map(el => ({
            depth: parseInt(el.tagName.substring(1), 10),
            // 修复：使用兼容性更好的语法替代可选链操作符
            text: (el.textContent || '').trim(),
            slug: el.id
        }));
        
        const validHeadings = headings.filter(h => h.text && h.depth >= 1 && h.depth <= 5);

        if (validHeadings.length > 0) {
            const tocHtml = buildTocHtml(validHeadings);
            placeholder.innerHTML = tocHtml;
            placeholder.style.display = 'block';
            addScrollListener();
        } else {
            placeholder.innerHTML = '';
            placeholder.style.display = 'none';
        }
    }

    document.addEventListener('astro:after-swap', manageToc);
    document.addEventListener('DOMContentLoaded', manageToc);
</script>
