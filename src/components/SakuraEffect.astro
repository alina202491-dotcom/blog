<!-- 
  This component creates a self-contained, high-performance cherry blossom falling effect 
  using an HTML5 Canvas. It is designed to work seamlessly with Astro's View Transitions.
-->
<canvas id="sakura-canvas"></canvas>

<style>
  #sakura-canvas {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none; /* Allows clicks to pass through the canvas */
    z-index: 9999;
  }
</style>

<script>
  // Check if the canvas element exists to avoid errors during Astro's build process.
  const canvas = document.getElementById('sakura-canvas') as HTMLCanvasElement;
  if (canvas) {
    const ctx = canvas.getContext('2d');
    let petals: Petal[] = [];

    // Set initial canvas size.
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    class Petal {
      x: number;
      y: number;
      size: number;
      speed: number;
      angle: number;
      spin: number;
      color: string;

      constructor() {
        this.x = Math.random() * canvas.width;
        this.y = Math.random() * canvas.height * 2 - canvas.height;
        this.size = Math.random() * 2 + 3;
        this.speed = Math.random() * 1 + 0.5;
        this.angle = Math.random() * Math.PI * 2;
        this.spin = Math.random() < 0.5 ? -1 : 1;
        this.color = `rgba(255, 192, 203, ${Math.random() * 0.5 + 0.5})`; // Pink with random opacity
      }

      update() {
        this.y += this.speed;
        this.x += Math.sin(this.angle);
        this.angle += 0.03 * this.spin;

        // Reset petal when it goes off screen
        if (this.y > canvas.height) {
          this.x = Math.random() * canvas.width;
          this.y = -10;
        }
      }

      draw() {
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        ctx.fillStyle = this.color;
        ctx.fill();
        ctx.closePath();
      }
    }

    function init() {
      const numberOfPetals = Math.floor(window.innerWidth / 30); // Adjust density based on screen width
      for (let i = 0; i < numberOfPetals; i++) {
        petals.push(new Petal());
      }
    }

    function animate() {
      // Clear the canvas for the new frame
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Update and draw each petal
      for (let i = 0; i < petals.length; i++) {
        petals[i].update();
        petals[i].draw();
      }

      // Request the next frame
      requestAnimationFrame(animate);
    }

    // Handle window resize to make the effect responsive.
    window.addEventListener('resize', () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
      // Re-initialize petals for the new screen size
      petals = [];
      init();
    });

    // Start the animation
    init();
    animate();
  }
</script>
