<!-- 
  This is a completely revamped version of the SakuraEffect component.
  - Implements a depth-of-field effect (DoF).
  - Mixes large, detailed petals with small, dark particles for realism.
  - Adds a soft glow to petals.
  - The animation path is more dynamic.
-->
<canvas id="sakura-canvas"></canvas>

<style>
  #sakura-canvas {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none; /* Allows clicks to pass through the canvas */
    z-index: 9999;
  }
</style>

<script>
  const canvas = document.getElementById('sakura-canvas') as HTMLCanvasElement;
  if (canvas) {
    const ctx = canvas.getContext('2d');
    // The array will now hold different types of particles
    let particles: (Petal | Dust)[] = [];

    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    // A base class for all particles
    abstract class Particle {
      x: number;
      y: number;
      abstract update(): void;
      abstract draw(): void;
    }

    // The main, larger cherry blossom petals
    class Petal extends Particle {
      size: number;
      speedX: number;
      speedY: number;
      angle: number;
      spin: number;
      sway: number;
      color: string;
      depth: number;

      constructor() {
        super();
        this.depth = Math.random(); // Depth determines size, speed, and opacity
        this.size = ((this.depth * 8) + 5) * 7; // Larger petals based on depth, increased 7x
        this.x = Math.random() * canvas.width * 1.5 - (canvas.width * 0.25);
        this.y = Math.random() * -canvas.height;
        this.speedY = (this.depth * 0.8) + 0.7;
        this.speedX = (this.depth * 0.6) + 0.5;
        this.angle = Math.random() * Math.PI * 2;
        this.spin = Math.random() < 0.5 ? -1 : 1;
        this.sway = Math.random() * 0.8;
        this.color = `rgba(255, 192, 203, ${this.depth * 0.5 + 0.5})`;
      }

      update() {
        this.y += this.speedY;
        this.x -= this.speedX;
        this.x += Math.sin(this.angle) * this.sway;
        this.angle += 0.03 * this.spin;

        if (this.y > canvas.height + this.size || this.x < -this.size) {
          this.x = Math.random() * canvas.width * 1.5 - (canvas.width * 0.25);
          this.y = -20;
        }
      }

      draw() {
        ctx.save();
        ctx.translate(this.x, this.y);
        ctx.rotate(this.angle);
        
        // Add a soft glow for a more beautiful effect
        ctx.shadowColor = 'rgba(255, 255, 255, 0.7)';
        ctx.shadowBlur = 10;

        ctx.beginPath();
        ctx.moveTo(0, 0);
        ctx.quadraticCurveTo(this.size / 2, this.size / 4, this.size, 0);
        ctx.quadraticCurveTo(this.size / 2, -this.size / 4, 0, 0);
        ctx.quadraticCurveTo(-this.size / 2, -this.size / 4, -this.size, 0);
        ctx.quadraticCurveTo(-this.size / 2, this.size / 4, 0, 0);

        ctx.fillStyle = this.color;
        ctx.fill();
        ctx.closePath();
        
        ctx.restore();
      }
    }

    // The smaller, darker particles for the background
    class Dust extends Particle {
      size: number;
      speedX: number;
      speedY: number;
      color: string;

      constructor() {
        super();
        this.size = (Math.random() * 2 + 1) * 7; // Increased size 7x
        this.x = Math.random() * canvas.width;
        this.y = Math.random() * -canvas.height;
        this.speedY = Math.random() * 0.5 + 0.3; // Slower than petals
        this.speedX = Math.random() * 0.4 + 0.2;
        this.color = 'rgba(100, 100, 100, 0.3)'; // Dark and transparent
      }

      update() {
        this.y += this.speedY;
        this.x -= this.speedX;

        if (this.y > canvas.height + this.size || this.x < -this.size) {
          this.x = Math.random() * canvas.width;
          this.y = -10;
        }
      }

      draw() {
        ctx.beginPath();
        ctx.fillRect(this.x, this.y, this.size, this.size);
        ctx.fillStyle = this.color;
        ctx.fill();
        ctx.closePath();
      }
    }

    function init() {
      // Create a much larger number of particles
      const numberOfParticles = Math.floor(window.innerWidth / 15);
      for (let i = 0; i < numberOfParticles; i++) {
        // 20% chance to create a large Petal, 80% chance for small Dust
        if (Math.random() > 0.8) {
          particles.push(new Petal());
        } else {
          particles.push(new Dust());
        }
      }
    }

    function animate() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      for (let i = 0; i < particles.length; i++) {
        particles[i].update();
        particles[i].draw();
      }
      requestAnimationFrame(animate);
    }

    window.addEventListener('resize', () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
      particles = [];
      init();
    });

    init();
    animate();
  }
</script>
