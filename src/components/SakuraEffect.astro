<!-- 
  This is an improved version of the SakuraEffect component.
  - Petals are now drawn with a more realistic shape.
  - The falling animation now follows a curved path from top-right to bottom-left.
-->
<canvas id="sakura-canvas"></canvas>

<style>
  #sakura-canvas {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none; /* Allows clicks to pass through the canvas */
    z-index: 9999;
  }
</style>

<script>
  const canvas = document.getElementById('sakura-canvas') as HTMLCanvasElement;
  if (canvas) {
    const ctx = canvas.getContext('2d');
    let petals: Petal[] = [];

    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    class Petal {
      x: number;
      y: number;
      size: number;
      speedX: number;
      speedY: number;
      angle: number;
      spin: number;
      sway: number;
      color: string;

      constructor() {
        // Start petals from the top-right area, including off-screen
        this.x = Math.random() * canvas.width + 50;
        this.y = Math.random() * -canvas.height - 50;
        this.size = Math.random() * 5 + 4; // Petal size
        this.speedY = Math.random() * 0.5 + 0.8; // Vertical speed
        this.speedX = Math.random() * 0.5 + 0.6; // Horizontal speed (to the left)
        this.angle = Math.random() * Math.PI * 2; // Initial rotation
        this.spin = Math.random() < 0.5 ? -1 : 1; // Rotation direction
        this.sway = Math.random() * 0.8; // Sway amplitude
        this.color = `rgba(255, 192, 203, ${Math.random() * 0.4 + 0.6})`; // Pink with random opacity
      }

      update() {
        // Update position for diagonal movement
        this.y += this.speedY;
        this.x -= this.speedX;

        // Add a curved sway to the movement
        this.x += Math.sin(this.angle) * this.sway;

        // Update rotation angle for a spinning effect
        this.angle += 0.02 * this.spin;

        // Reset petal when it goes off screen (bottom or left)
        if (this.y > canvas.height + this.size || this.x < -this.size) {
          // Reset to the top-right again
          this.x = Math.random() * canvas.width + 50;
          this.y = -20;
        }
      }

      draw() {
        ctx.save(); // Save the current canvas state
        ctx.translate(this.x, this.y); // Move origin to petal's position
        ctx.rotate(this.angle); // Rotate the canvas
        
        ctx.beginPath();
        // Use bezier curves to draw a petal shape
        ctx.moveTo(0, 0);
        ctx.quadraticCurveTo(this.size / 2, this.size / 4, this.size, 0);
        ctx.quadraticCurveTo(this.size / 2, -this.size / 4, 0, 0);
        
        ctx.quadraticCurveTo(-this.size / 2, -this.size / 4, -this.size, 0);
        ctx.quadraticCurveTo(-this.size / 2, this.size / 4, 0, 0);

        ctx.fillStyle = this.color;
        ctx.fill();
        ctx.closePath();
        
        ctx.restore(); // Restore the canvas state
      }
    }

    function init() {
      const numberOfPetals = Math.floor(window.innerWidth / 40);
      for (let i = 0; i < numberOfPetals; i++) {
        petals.push(new Petal());
      }
    }

    function animate() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      for (let i = 0; i < petals.length; i++) {
        petals[i].update();
        petals[i].draw();
      }
      requestAnimationFrame(animate);
    }

    window.addEventListener('resize', () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
      petals = [];
      init();
    });

    init();
    animate();
  }
</script>
